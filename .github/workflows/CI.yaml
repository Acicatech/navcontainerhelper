name: CI

on:
  workflow_dispatch:

permissions:
  contents: read

defaults:
  run:
    shell: PowerShell

jobs:
  AnalyzeTests:
    runs-on: [ windows-latest ]
    outputs:
      tests: ${{ steps.Analyze.outputs.tests }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Analyze
        id: Analyze
        run: |
          $tests = @(Get-ChildItem -Path (Join-Path $ENV:GITHUB_WORKSPACE 'Tests\*.Tests.ps1') | ForEach-Object { $_.BaseName }) | ConvertTo-Json -compress
          Write-Host "::set-output name=tests::$tests"
          Write-Host "set-output name=tests::$tests"

  RunTests:
    runs-on: [ windows-latest ]
    needs: [ AnalyzeTests ]
    strategy:
      matrix:
        test: ${{fromJson(needs.AnalyzeTests.outputs.tests)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Run Tests
        run: |
          try {
            $errorActionPreference = "stop"
            Set-StrictMode -version 2.0
            $pesterContainer = New-PesterContainer -Path (Join-Path $ENV:GITHUB_WORKSPACE 'Tests\${{ matrix.test }}.ps1') -Data @{ "licenseFile" = '${{ secrets.licensefile }}'; "buildLicenseFile" = '${{ secrets.buildLicenseFile }}'; "insiderSasToken" = '${{ secrets.insiderSasToken }}' }
            $result = Invoke-Pester -Container $pesterContainer -passthru
            if ($result.FailedCount -gt 0) {
              Write-Host "::Error::$($result.FailedCount) tests are failing"
              $host.SetShouldExit(1)
            }
          }
          catch {
            Write-Host "::Error::Exception when running tests. The Error was $($_.Exception.Message)"
            $host.SetShouldExit(1)
          }

